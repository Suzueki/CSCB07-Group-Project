Index: app/src/main/java/com/b07group32/relationsafe/LoginPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.b07group32.relationsafe;\r\n\r\n//This is the presenter component of MVP\r\npublic class LoginPresenter implements LoginContract.Presenter {\r\n\r\n    private LoginContract.View view;\r\n    private LoginContract.Model model;\r\n    private boolean isPinLoginMode = false;\r\n\r\n    public LoginPresenter(LoginContract.View view, LoginContract.Model model) {\r\n        this.view = view;\r\n        this.model = model;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated() {\r\n        checkInitialLoginMode();\r\n    }\r\n\r\n    @Override\r\n    public void onLoginButtonClicked() {\r\n        String email = view.getEmail();\r\n        String password = view.getPassword();\r\n\r\n        if (view.isEmpty(email) || view.isEmpty(password)) {\r\n            view.showToast(\"Email and password required\");\r\n            return;\r\n        }\r\n\r\n        model.signInWithEmailAndPassword(email, password, new LoginContract.Model.AuthCallback() {\r\n            @Override\r\n            public void onSuccess() {\r\n                view.showToast(\"Login successful\");\r\n                model.saveUserCredentials(email, password, new LoginContract.Model.SaveCallback() {\r\n                    @Override\r\n                    public void onSuccess() {\r\n                        checkPinStatus();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(String error) {\r\n                        // Continue even if credential saving fails\r\n                        checkPinStatus();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String error) {\r\n                view.showToast(\"Login failed: \" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onRegisterButtonClicked() {\r\n        String email = view.getEmail();\r\n        String password = view.getPassword();\r\n\r\n        if (view.isEmpty(email) || view.isEmpty(password)) {\r\n            view.showToast(\"Email and password required\");\r\n            return;\r\n        }\r\n\r\n        model.createUserWithEmailAndPassword(email, password, new LoginContract.Model.AuthCallback() {\r\n            @Override\r\n            public void onSuccess() {\r\n                view.showToast(\"Registration successful\");\r\n                model.saveUserCredentials(email, password, new LoginContract.Model.SaveCallback() {\r\n                    @Override\r\n                    public void onSuccess() {\r\n                        checkPinStatus();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(String error) {\r\n                        // Continue even if credential saving fails\r\n                        checkPinStatus();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String error) {\r\n                view.showToast(\"Registration failed: \" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onPinLoginButtonClicked() {\r\n        String enteredPin = view.getPin();\r\n\r\n        if (view.isEmpty(enteredPin)) {\r\n            view.showToast(\"Please enter your PIN\");\r\n            return;\r\n        }\r\n\r\n        model.verifyPin(enteredPin, new LoginContract.Model.PinVerificationCallback() {\r\n            @Override\r\n            public void onResult(boolean isValid) {\r\n                if (isValid) {\r\n                    model.authenticateWithSavedCredentials(new LoginContract.Model.AuthCallback() {\r\n                        @Override\r\n                        public void onSuccess() {\r\n                            view.showToast(\"PIN login successful\");\r\n                            view.loadFragment(new HomeFragment());\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(String error) {\r\n                            view.showToast(error);\r\n                            switchToEmailLogin();\r\n                        }\r\n                    });\r\n                } else {\r\n                    view.showToast(\"Invalid PIN\");\r\n                    view.clearPinField();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(String error) {\r\n                view.showToast(\"Error verifying PIN\");\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onSwitchToPinClicked() {\r\n        switchToPinLogin();\r\n    }\r\n\r\n    @Override\r\n    public void onSwitchToEmailClicked() {\r\n        switchToEmailLogin();\r\n    }\r\n\r\n    @Override\r\n    public void onPinSetup(String pin, String confirmPin) {\r\n        if (model.isValidPin(pin) && pin.equals(confirmPin)) {\r\n            model.savePin(pin, new LoginContract.Model.SaveCallback() {\r\n                @Override\r\n                public void onSuccess() {\r\n                    view.showToast(\"PIN set successfully\");\r\n                    view.loadFragment(new HomeFragment());\r\n                }\r\n\r\n                @Override\r\n                public void onError(String error) {\r\n                    view.showToast(error);\r\n                }\r\n            });\r\n        } else {\r\n            view.showToast(\"PIN must be 4 or 6 digits and match confirmation\");\r\n            view.showPinSetupDialog(); // Show dialog again if invalid PIN\r\n        }\r\n    }\r\n\r\n    private void checkInitialLoginMode() {\r\n        model.checkIfPinIsSet(new LoginContract.Model.PinCallback() {\r\n            @Override\r\n            public void onResult(boolean isPinSet) {\r\n                if (isPinSet) {\r\n                    view.showPinSwitchOption(true);\r\n                    showEmailPasswordLogin();\r\n                } else {\r\n                    view.showPinSwitchOption(false);\r\n                    showEmailPasswordLogin();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(String error) {\r\n                // In case PIN check fails, serve standard Firebase login\r\n                view.showPinSwitchOption(false);\r\n                showEmailPasswordLogin();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void switchToPinLogin() {\r\n        isPinLoginMode = true;\r\n        showPinLogin();\r\n    }\r\n\r\n    private void switchToEmailLogin() {\r\n        isPinLoginMode = false;\r\n        showEmailPasswordLogin();\r\n    }\r\n\r\n    private void showEmailPasswordLogin() {\r\n        view.showEmailPasswordLogin();\r\n        view.showPinSwitchOption(true);\r\n        view.showEmailSwitchOption(false);\r\n    }\r\n\r\n    private void showPinLogin() {\r\n        view.showPinLogin();\r\n        view.showPinSwitchOption(false);\r\n        view.showEmailSwitchOption(true);\r\n    }\r\n\r\n    private void checkPinStatus() {\r\n        model.checkIfPinIsSet(new LoginContract.Model.PinCallback() {\r\n            @Override\r\n            public void onResult(boolean isPinSet) {\r\n                if (isPinSet) {\r\n                    // If PIN already exists, go to main app\r\n                    view.loadFragment(new HomeFragment());\r\n                } else {\r\n                    // If PIN not set, prompt user to create one\r\n                    view.showPinSetupDialog();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(String error) {\r\n                view.showToast(error);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/b07group32/relationsafe/LoginPresenter.java b/app/src/main/java/com/b07group32/relationsafe/LoginPresenter.java
--- a/app/src/main/java/com/b07group32/relationsafe/LoginPresenter.java	(revision fc965d2086c37821a98f878100ba25a14913d522)
+++ b/app/src/main/java/com/b07group32/relationsafe/LoginPresenter.java	(date 1754409615126)
@@ -82,7 +82,7 @@
 
             @Override
             public void onFailure(String error) {
-                view.showToast("Registration failed: " + error);
+                view.showToast("Registration failed.");
             }
         });
     }
@@ -216,7 +216,7 @@
 
             @Override
             public void onError(String error) {
-                view.showToast(error);
+                view.showToast("Invalid PIN.");
             }
         });
     }
Index: .idea/deviceManager.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DeviceTable\">\r\n    <option name=\"columnSorters\">\r\n      <list>\r\n        <ColumnSorterState>\r\n          <option name=\"column\" value=\"Type\" />\r\n          <option name=\"order\" value=\"ASCENDING\" />\r\n        </ColumnSorterState>\r\n      </list>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deviceManager.xml b/.idea/deviceManager.xml
--- a/.idea/deviceManager.xml	(revision fc965d2086c37821a98f878100ba25a14913d522)
+++ b/.idea/deviceManager.xml	(date 1754413173921)
@@ -7,6 +7,10 @@
           <option name="column" value="Type" />
           <option name="order" value="ASCENDING" />
         </ColumnSorterState>
+        <ColumnSorterState>
+          <option name="column" value="API" />
+          <option name="order" value="DESCENDING" />
+        </ColumnSorterState>
       </list>
     </option>
   </component>
